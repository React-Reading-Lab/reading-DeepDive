## 🤔 왜 리액트인가?

리액트는 현재 가장 널리 사용되는 프론트엔드 라이브러리 중 하나이며, 전자정부 표준 프레임워크로도 채택될 만큼 그 안정성과 인기를 인정받고 있다. 그 이유는 다음과 같다.

### 리액트의 장점

- **단방향 데이터 바인딩**: 데이터 흐름이 명확하여 상태 변화를 추적하고 디버깅하기 쉽다.
- **JSX 문법**: HTML과 유사한 문법을 JavaScript 코드 안에서 사용할 수 있어 배우기 쉽고 간결하다.
- **강력한 커뮤니티와 기업 지원**: 페이스북이 만들고 유지 관리하며, 많은 개발자들이 오픈소스 커뮤니티에 기여하고 있어 생태계가 활발하다.
- **높은 수요**: 많은 기업에서 사용 중이며 채용 시장에서도 리액트를 다룰 줄 아는 개발자를 선호한다.

## 🕰 리액트의 역사

### 1. **초기의 웹 개발 방식 (2000년대)**

리눅스, 아파치, 웹 서버, MySQL, PHP(이른바 LAMP) 스택을 활용한 웹 개발이 주를 이루었다. 이 방식은 대체적으로 데이터베이스에서 필요한 데이터를 불러온 다음, 웹 서버에서 HTML 페이지를 만들어서 클라이언트에 제공하는 구조였다.

### 2. **웹 기술의 발전 (2010년대 초반)**

간단한 웹 페이지라면 이러한 방식을 계속해서 사용해도 괜찮았겠지만, 2010년대에는 웹 생태계에 큰 변화가 일어났다. AJAX, WebSocket, LocalStorage, Canvas API, Geolocation API 등이 등장하면서 브라우저의 기능이 고도화되고 클라이언트에서도 다양한 기능을 수행하게 된 것이다. 또한 jQuery가 큰 인기를 끌며 DOM 조작이 쉬워졌고, 클라이언트 중심의 개발이 본격화되어 JavaScript 코드가 복잡해지면서 구조화와 관리의 필요성이 커졌다. 이에 따라 AngularJS, Backbone.js, Underscore.js, CoffeeScript 등 다양한 프레임워크가 등장했다.

### 3. **페이스북의 선택과 리액트의 등장**

이때 페이스북 또한 사용자에게 만족스러운 경험을 제공하고자 서버 렌더링 방식에서 최적화를 이루고자 했지만 한계가 있었고 시중에 나와있는 라이브러리로는 이를 만족하기 어려울 것이라 판단해 새로운 프레임워크 BoltJS 를 만들게 되었다. 이 시스템은 이후 React로 이름 붙여졌고, 인스타그램 웹버전을 만들기 위해 본격적으로 사용되었다.

### 4. **JSConf US 발표 (2013년)**

이후 JSConfg US에서 react와 함께 embedded XML(JSX)를 공개했지만 처음에는 반응이 좋지 않았다.

- 이유 1: HTML, CSS, JS를 파일 단위로 분리해야 한다는 기존 개발 문화와 충돌
- 이유 2: "UI는 상태의 함수이며, 변경된 부분만 다시 렌더링한다"는 철학이 명확히 전달되지 않음

하지만 일부 개발자들은 컴포넌트 중심 사고 방식에 공감했고, 이들이 활발히 오픈소스 커뮤니티에 기여하며 리액트는 점점 개선되기 시작했다. 이후 넷플릭스, 야후 등 대기업에서 채택하면서 본격적으로 주류 기술이 되었다.

## 🔮 리액트의 미래와 고민

프론트엔드에서 서버와의 역할 분담이 중요해지고 있으며, React 생태계에서도 SSR(Server-Side Rendering)이나 React Server Components 등을 활용한 서버 연산 방식이 주목받고 있다. 이에 따라 Node.js나 서버 기술에 대한 이해가 점점 더 중요해질 것이다.
